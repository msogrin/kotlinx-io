apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlinx.benchmark'
apply plugin: 'kotlinx-serialization'

// how to apply plugin to a specific source set?
allOpen {
    annotation("org.openjdk.jmh.annotations.State")
}

kotlin {
//    infra {
//        target('macosX64')
//        target('linuxX64')
//        target('mingwX64')
//    }

    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

// TODO: lookup benchmark configuration for js
//    js {
//        nodejs()
//    }

    sourceSets.all {
        kotlin.srcDirs = ["$it.name/src"]
        resources.srcDirs = ["$it.name/resources"]
        languageSettings {
            progressiveMode = true
            useExperimentalAnnotation("kotlin.Experimental")
            useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
            useExperimentalAnnotation("kotlinx.io.core.ExperimentalIoApi")
            useExperimentalAnnotation("kotlinx.io.unsafe.DangerousInternalIoApi")
            useExperimentalAnnotation("kotlin.contracts.ExperimentalContracts")
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation project(":kotlinx-io")
                implementation project(":kotlinx-io-playground")
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx.benchmark.runtime:$benchmarks_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
                api("com.google.code.gson:gson:$gson_version")
                api("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
                api("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_kotlin_version")
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
            }
        }

        nativeMain {
            dependencies {
            }
        }
    }
}

// Configure benchmark
benchmark {
    configurations {
        main {
            iterations = 10 // number of iterations
            warmups = 10
            iterationTime = 1000

            iterationTimeUnit = "ms"

            if (project.hasProperty("benchmarkName")) {
                def benchmarkName = project.getProperty("benchmarkName")
                include(benchmarkName)
            }
        }
    }

    // Setup configurations
    targets {
        // This one matches compilation base name, e.g. 'jvm', 'jvmTest', etc
        register("jvm") {
            jmhVersion = "1.21"
        }
        register("js") {}
        register("native") {}
    }
}

